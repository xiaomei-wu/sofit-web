// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, citext]
}

model User {
  uuid       String           @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nickName   String?          @db.VarChar(255)
  firstName  String?          @db.VarChar(255)
  lastName   String?          @db.VarChar(255)
  email      String           @unique @db.Citext
  password   String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  foodRecord UserFoodRecord[]
}

enum FoodCategory {
  GENERIC_FOODS
  PACKAGED_FOODS
}

model Food {
  uuid            String           @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String           @db.VarChar(255)
  brand           String           @db.VarChar(255)
  imgUrl          String?
  category        FoodCategory
  nutrients       Nutrient[]
  userFoodRecords UserFoodRecord[]
  measures        Measure[]
  dietLabel       DietLabel[]
  healthLabels    HealthLabel[]
  cautions        Caution[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Measure {
  uuid   String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uri    String
  label  String
  weight Float
  foodId String @db.Uuid
  food   Food   @relation(fields: [foodId], references: [uuid])
}

model Recipe {
  uuid           String             @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String             @db.VarChar(255)
  imgUrl         String?
  source         String?            @db.VarChar(255)
  yield          Float
  dietLabels     DietLabel[]
  healthLabels   HealthLabel[]
  ingredients    RecipeIngredient[]
  mealType       MealType[]
  calories       Float
  cuisineType    CuisineType[]
  dishType       DishType[]
  cautions       Caution[]
  userFoodRecord UserFoodRecord[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  Nutrient       Nutrient[]
}

model DietLabel {
  uuid     String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label    String
  recipeId String? @db.Uuid
  recipe   Recipe? @relation(fields: [recipeId], references: [uuid])
  foodId   String? @db.Uuid
  food     Food?   @relation(fields: [foodId], references: [uuid])
}

model HealthLabel {
  uuid     String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label    String
  recipeId String? @db.Uuid
  recipe   Recipe? @relation(fields: [recipeId], references: [uuid])
  foodId   String? @db.Uuid
  food     Food?   @relation(fields: [foodId], references: [uuid])
}

model Caution {
  uuid     String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label    String
  recipeId String? @db.Uuid
  recipe   Recipe? @relation(fields: [recipeId], references: [uuid])
  foodId   String? @db.Uuid
  food     Food?   @relation(fields: [foodId], references: [uuid])
}

model CuisineType {
  uuid     String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label    String
  recipeId String? @db.Uuid
  recipe   Recipe? @relation(fields: [recipeId], references: [uuid])
}

model MealType {
  uuid     String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label    String
  recipeId String? @db.Uuid
  recipe   Recipe? @relation(fields: [recipeId], references: [uuid])
}

model DishType {
  uuid     String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label    String
  recipeId String? @db.Uuid
  recipe   Recipe? @relation(fields: [recipeId], references: [uuid])
}

model RecipeIngredient {
  uuid     String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text     String
  quantity Float
  measure  String?
  food     String
  weight   Float?

  recipeId String @db.Uuid
  recipe   Recipe @relation(fields: [recipeId], references: [uuid])
}

model Nutrient {
  uuid       String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  enerc_Kcal Float?
  procnt_g   Float?
  fat_g      Float?
  chocdf_g   Float?
  sugar_g    Float?
  fibt_g     Float?

  recipeId String? @db.Uuid
  recipe   Recipe? @relation(fields: [recipeId], references: [uuid])
  foodId   String? @db.Uuid
  food     Food?   @relation(fields: [foodId], references: [uuid])
}

enum MealCategory {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum FoodType {
  FOOD
  RECIPE
}

model UserFoodRecord {
  uuid          String        @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  servingAmount Float
  servingSize   String
  date          DateTime
  startTime     DateTime
  mealCategory  MealCategory?
  userId        String        @db.Uuid
  user          User          @relation(fields: [userId], references: [uuid])
  foodId        String?       @db.Uuid
  food          Food?         @relation(fields: [foodId], references: [uuid])
  recipeId      String?       @db.Uuid
  recipe        Recipe?       @relation(fields: [recipeId], references: [uuid])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Drink {
  uuid          String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  servingAmount Float
  servingSize   String
  date          DateTime
  startTime     DateTime
  category      String?
  imgUrl        String?
}

model Energy {
  uuid        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime
  startTime   DateTime
  energyLevel Int
  notes       String
}

model Excercise {
  uuid            String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date            DateTime
  startTime       DateTime
  name            String
  notes           String
  intensityLevel  Int
  durationSeconds Int
}

model Sleep {
  uuid            String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date            DateTime
  startTime       DateTime
  notes           String
  durationSeconds Int
}

model Symptom {
  uuid            String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date            DateTime
  startTime       DateTime
  name            String
  notes           String
  intensityLevel  Int
  durationSeconds Int
}
